{"version":3,"sources":["data.ts","Options.tsx","WorldMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["basicMats","matTypes","map","lvl","t","Point","parse","s","res","match","Error","x","y","z","Number","show","p","Math","round","Options","state","setState","l","i","key","FormControlLabel","label","control","Checkbox","checked","includes","value","onChange","_e","v","tag","concat","filter","Button","onClick","PointComponent","React","useState","useSnackbar","active","title","Tooltip","style","background","border","borderRadius","position","cursor","height","width","left","top","onMouseEnter","onMouseLeave","navigator","clipboard","writeText","enqueueSnackbar","autoHideDuration","resumeHideDuration","WorldMap","points","src","alt","App","options","setOptions","filtered","flatMap","Object","entries","data","k","CssBaseline","maxSnack","className","textAlign","Grid","container","justify","item","Typography","align","href","target","rel","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAAMA,EAAY,CAAC,OAAQ,QAAS,QAAS,UAChCC,EAAW,CAAC,EAAG,EAAG,EAAG,GAAGC,IAAI,SAAAC,GAAG,OAAIH,EAAUE,IAAI,SAAAE,GAAC,OAAIA,EAAID,MAsBhE,IAAME,EAAQ,CAAEC,MAdvB,SAAeC,GACb,IAEMC,EAAMD,EAAEE,MAFA,qCAGd,IAAKD,EACH,MAAM,IAAIE,MAAM,iBAAmBH,GALN,kBAOXC,EAPW,GAOtBG,EAPsB,KAOnBC,EAPmB,KAOhBC,EAPgB,KAQ/B,MAAO,CAAEF,EAAGG,OAAOH,GAAIC,EAAGE,OAAOF,GAAIC,EAAGC,OAAOD,KAMnBE,KAJ9B,SAAcC,GACZ,MAAM,GAAN,OAAUC,KAAKC,MAAMF,EAAEL,GAAvB,YAA6BM,KAAKC,MAAMF,EAAEJ,M,SCX/BO,EAGR,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAUb,OACE,6BACE,oCAYCpB,EAASC,IAAI,SAACoB,EAAGC,GAAJ,OACZ,yBAAKC,IAAKD,GACPD,EAAEpB,IAAI,SAAAE,GAAC,OACN,kBAACqB,EAAA,EAAD,CACED,IAAKpB,EACLsB,MAAOtB,EACPuB,QACE,kBAACC,EAAA,EAAD,CACEC,QAAST,EAAMU,SAAS1B,GACxB2B,MAAO3B,EACP4B,SAAU,SAACC,EAAIC,GAAL,OAjCVC,EAiC4B/B,OA/BxCiB,EA+B2Ca,EA/BlCd,EAAMgB,OAAOD,GAEbf,EAAMiB,OAAO,SAAAjC,GAAC,OAAIA,IAAM+B,KAJrC,IAAgBA,YAwCZ,kBAACG,EAAA,EAAD,CAAQC,QAAS,kBAAMlB,EAAS,MAAhC,W,SC1CAmB,EAA6C,SAAC,GAAe,IAAbT,EAAY,EAAZA,MAAY,EACtCU,IAAMC,UAAS,GADuB,mBACzDtB,EADyD,KAClDC,EADkD,KAE1Dd,EAAIoC,wBACJC,EAAS9B,OAAOM,GAChByB,EAAQxC,EAAMU,KAAKgB,GACzB,OACE,kBAACe,EAAA,EAAD,CAASD,MAAOA,GACd,yBACEE,MAAO,CACLC,WAAY,SACZC,OAAQ,kBACRC,aAAc,EACdC,SAAU,WACVC,OAAQ,UACRC,OAAQ,EAAI,EAAIT,EAChBU,MAAO,EAAI,EAAIV,EACfW,KAAM,IAlBN,IAkBYxB,EAAMpB,EAAQ,EAAIiC,EAC9BY,IAAK,IAnBL,IAmBWzB,EAAMnB,EAAQ,EAAIgC,GAE/Ba,aAAc,kBAAMpC,GAAS,IAC7BqC,aAAc,kBAAMrC,GAAS,IAC7BkB,QAAS,WACPoB,UAAUC,UAAUC,UAAUhB,GAC9BtC,EAAEuD,gBAAgB,UAAYjB,EAAO,CACnCkB,iBAAkB,KAClBC,mBAAoB,WAQnBC,EAA0C,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACxD,OACE,yBAAKnB,MAAO,CAAEI,SAAU,aACtB,yBACEgB,IAAI,qDACJC,IAAI,cAELF,EAAOhE,IAAI,SAACc,EAAGO,GAAJ,OACV,kBAAC,EAAD,CAAgBQ,MAAOf,EAAGQ,IAAK,GAAKR,EAAEL,EAAIK,EAAEJ,EAAII,EAAEH,Q,yBCL3CwD,EApCO,WAAO,IAAD,EACI5B,IAAMC,SAAmBzC,EAAS,IADtC,mBACnBqE,EADmB,KACVC,EADU,KAEpBC,EAAWC,IACfC,OAAOC,QAAQC,GAAMvC,OAAO,mCAAEwC,EAAF,iBAAaP,EAAQxC,SAAS+C,KAC1D,sDAEF,OACE,oCACE,kBAACC,EAAA,EAAD,MACA,kBAAC,mBAAD,CAAkBC,SAAU,GAC1B,yBAAKC,UAAU,OACb,wBAAIjC,MAAO,CAAEkC,UAAW,WAAxB,sBACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBACtB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,EAAD,CAASjE,MAAOkD,EAASjD,SAAUkD,KAErC,kBAACW,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,EAAD,CAAUnB,OAAQM,MAGtB,kBAACc,EAAA,EAAD,CAAYC,MAAM,UAAlB,WACW,IACT,uBACEC,KAAK,4BACLC,OAAO,SACPC,IAAI,uBAHN,mBCrBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrF,MACvB,2DCZNsF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.529d7850.chunk.js","sourcesContent":["const basicMats = [\"wood\", \"metal\", \"stone\", \"energy\"];\r\nexport const matTypes = [1, 2, 3, 4].map(lvl => basicMats.map(t => t + lvl));\r\n\r\nexport type Point = {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n};\r\n\r\nfunction parse(s: string): Point {\r\n  const regex = /^(\\d{1,3}) (\\d{1,4})\\((\\d{1,2})\\)/;\r\n\r\n  const res = s.match(regex);\r\n  if (!res) {\r\n    throw new Error(\"Invalid point \" + s);\r\n  }\r\n  const [, x, y, z] = res;\r\n  return { x: Number(x), y: Number(y), z: Number(z) };\r\n}\r\nfunction show(p: Point): string {\r\n  return `${Math.round(p.x)} ${Math.round(p.y)}`;\r\n}\r\n\r\nexport const Point = { parse, show };\r\n","import Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport React from \"react\";\r\nimport { matTypes } from \"./data\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n// const allTypes = matTypes.flat();\r\n\r\ntype State = string[];\r\nexport const Options: React.FC<{\r\n  state: State;\r\n  setState: React.Dispatch<State>;\r\n}> = ({ state, setState }) => {\r\n  function setTag(tag: string, b: boolean) {\r\n    if (b) {\r\n      setState(state.concat(tag));\r\n    } else {\r\n      setState(state.filter(t => t !== tag));\r\n    }\r\n  }\r\n  // const allSelected = state.length === allTypes.length;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Show</h1>\r\n      {/* <FormControlLabel\r\n        label=\"All\"\r\n        control={\r\n          <Checkbox\r\n            checked={!!state.length}\r\n            value=\"All\"\r\n            indeterminate={!!state.length && !allSelected}\r\n            onChange={() => (allSelected ? setState([]) : setState(allTypes))}\r\n          />\r\n        }\r\n      ></FormControlLabel> */}\r\n      {matTypes.map((l, i) => (\r\n        <div key={i}>\r\n          {l.map(t => (\r\n            <FormControlLabel\r\n              key={t}\r\n              label={t}\r\n              control={\r\n                <Checkbox\r\n                  checked={state.includes(t)}\r\n                  value={t}\r\n                  onChange={(_e, v) => setTag(t, v)}\r\n                />\r\n              }\r\n            ></FormControlLabel>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <Button onClick={() => setState([])}>Reset</Button>\r\n      {/* <pre>{JSON.stringify(state, null, 2)}</pre> */}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { Point } from \"./data\";\r\n\r\n// const p1 = \"125 236\"; // 315 598\r\n// const p2 = \"167 278\"; // 344 569\r\n// const x0 = 229;\r\n// const y0 = 761;\r\nconst r = 0.69;\r\n\r\nconst PointComponent: React.FC<{ value: Point }> = ({ value }) => {\r\n  const [state, setState] = React.useState(false);\r\n  const s = useSnackbar();\r\n  const active = Number(state);\r\n  const title = Point.show(value);\r\n  return (\r\n    <Tooltip title={title}>\r\n      <div\r\n        style={{\r\n          background: \"yellow\",\r\n          border: \"1px solid black\",\r\n          borderRadius: 1,\r\n          position: \"absolute\",\r\n          cursor: \"pointer\",\r\n          height: 7 + 4 * active,\r\n          width: 7 + 4 * active,\r\n          left: 229 + value.x * r - 2 * active,\r\n          top: 761 - value.y * r - 2 * active,\r\n        }}\r\n        onMouseEnter={() => setState(true)}\r\n        onMouseLeave={() => setState(false)}\r\n        onClick={() => {\r\n          navigator.clipboard.writeText(title);\r\n          s.enqueueSnackbar(\"Copied \" + title, {\r\n            autoHideDuration: 1500,\r\n            resumeHideDuration: 200,\r\n          });\r\n        }}\r\n      ></div>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport const WorldMap: React.FC<{ points: Point[] }> = ({ points }) => {\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <img\r\n        src=\"http://www.pwdatabase.com/images/maps/ru/world.jpg\"\r\n        alt=\"world-map\"\r\n      />\r\n      {points.map((p, i) => (\r\n        <PointComponent value={p} key={\"\" + p.x + p.y + p.z} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport { Options } from \"./Options\";\nimport { WorldMap } from \"./WorldMap\";\nimport data from \"./data.json\";\nimport { matTypes } from \"./data\";\nimport flatMap from \"lodash/flatMap\";\n\nconst App: React.FC = () => {\n  const [options, setOptions] = React.useState<string[]>(matTypes[2]);\n  const filtered = flatMap(\n    Object.entries(data).filter(([k, _v]) => options.includes(k)),\n    ([_k, v]) => v,\n  );\n  return (\n    <>\n      <CssBaseline />\n      <SnackbarProvider maxSnack={3}>\n        <div className=\"App\">\n          <h1 style={{ textAlign: \"center\" }}>Interactive pw map</h1>\n          <Grid container justify=\"space-evenly\">\n            <Grid item>\n              <Options state={options} setState={setOptions} />\n            </Grid>\n            <Grid item>\n              <WorldMap points={filtered} />\n            </Grid>\n          </Grid>\n          <Typography align=\"center\">\n            Based on{\" \"}\n            <a\n              href=\"http://www.pwdatabase.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              pwdatabase\n            </a>\n          </Typography>\n        </div>\n      </SnackbarProvider>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}